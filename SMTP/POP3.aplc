:class POP3

    ⎕IO←⎕ML←1

    :field public Server←''  ⍝ server address
    :field public Port←⍬     ⍝ server port
    :field public Userid←''  ⍝ userid for authentication (defaults to From)
    :field public Password←''⍝ optional password (if server requires authentication)
    :field public MessageSizeLimit←10000000 ⍝ size limit of a single message
    :field public Secure←0   ⍝ indicates whether to use SSL/TLS, 0 = no, 1 = yes
    :field public CongaRootName←'POP3'
    :field public UseAPOP←1  ⍝ use APOP for authentication if server supports it

    :field public shared CongaRef←''   ⍝ user-supplied reference to location of Conga namespace
    :field public shared LDRC←''       ⍝ reference to Conga library instance after CongaRef has been resolved
    :field public shared Conga

    :field _clt←''          ⍝ Conga client id
    :field _loggedOn←0
    :field _conx←''         ⍝ Conga connection id

    :property Clt  ⍝ client
    :access public
        ∇ r←get
          r←_clt
        ∇
    :endproperty

    :property Conx  ⍝ client connection
    :access public
        ∇ r←get
          r←_conx
        ∇
    :endproperty


    ∇ make
      :Access public
      :Implements constructor
    ∇

    ∇ make1 args
    ⍝ args is either a vector with up to 4 elements: [1] server, [2] userid, [3] password, [4] port
      :Access public
      :Implements constructor
      (Server Userid Password Port Secure)←(Server Userid Password Port Secure){(≢⍺)↑⍵,(≢⍵)↓⍺},⊆args
    ∇

    ∇ unmake
      :Implements destructor
      :If ⊃Connected ⋄ Do'QUIT' ⋄ :EndIf
    ∇

    ∇ (rc msg)←Connect;r;uid;dom;cert;APOP
      :Access public
      (rc msg)←¯1 ''
      :If 0∊⍴Server ⋄ →Exit⊣msg←'Server not defined' ⋄ :EndIf
     
      Port←⊃Port ⍝ ⊃Port will be 0 if Port has not been set
      :If 0=Port ⋄ Port←110 995[1+Secure] ⋄ :EndIf ⍝ is not set use appropriate default port for POP3
     
      :If ~Port∊⍳65535 ⋄ →Exit⊣msg←'Invalid Port' ⋄ :EndIf
     
      :If 0∊⍴uid←Userid ⋄ →Exit⊣msg←'Empty Userid' ⋄ :EndIf
      :If 0=≢Password ⋄ →Exit⊣msg←'Empty Password' ⋄ :EndIf
     
      :If 0∊⍴LDRC
      :OrIf {6::1 ⋄ 0⊣LDRC.Describe'.'}''
          (rc msg)←Init CongaRootName
      :EndIf
     
      cert←⍬
      :If Secure
          :If 0∊⍴LDRC.X509Cert.LDRC ⋄ LDRC.X509Cert.LDRC←LDRC ⋄ :EndIf
          cert←⊂'X509'(⎕NEW LDRC.X509Cert)
      :EndIf
     
      :Select ⊃r←LDRC.Clt(''Server Port'text' 10000000,cert)
      :Case 0
          _clt←2⊃r                   ⍝ Conga client name
          :If 0=⊃(rc msg)←Do''       ⍝ retrieve the server ready message
              msg↓⍨←¯2×CRLF≡¯2↑msg   ⍝ drop off any trailing CRLF
              ⍝ APOP is a more secure authentication method.
              ⍝ If the POP3 server supports APOP, it will return a unique key as a part of the server ready message
              :If UseAPOP∧~0∊⍴APOP←'+OK POP3 server ready '{⍺≡(≢⍺)↑⍵:(≢⍺)↓⍵ ⋄ ''}msg ⍝ does server support APOP?
                  :If 0≠⊃(rc msg)←Do'APOP ',Userid,' ',MD5.Hash APOP,Password ⍝ successful APOP login?
                      {}LDRC.Close _clt
                      _clt←''
                  :EndIf
              :Else ⍝ If APOP isn't supported, or spe failed, try "standard" authentication
                  :If 0≠⊃(rc msg)←Do'USER ',Userid
                  :OrIf 0≠⊃(rc msg)←Do'PASS ',Password
                      {}LDRC.Close _clt
                      _clt←''
                  :EndIf
              :EndIf
          :Else
              {}LDRC.Close _clt
              _clt←''
          :EndIf
      :Case 100 ⍝ timeout
          msg←'Conga timeout on connect'
      :Else ⍝ some Conga error occured
          _clt←''
          msg←'Conga error: ',,⍕⊃r
      :EndSelect
     Exit:
    ∇

    ∇ r←Do cmd;cnt;rc;c
      :Access public
      →go
    ⍝ Send a command to a POP3 server and retrieve answer
    ⍝ cmd: POP3 command or empty vector
    ⍝      If cmd is an empty vector, the function returns a pending answer from the server
    ⍝ r    [1] 0 if OK or ¯1 if error
    ⍝      [2] status message or data depending on the command
    ⍝
    ⍝ Valid commands are:
    ⍝ Name Parameter    Description & return codes (S=success, E=error)
    ⍝ ---- -----------  ------------------------------------------------
    ⍝ USER user name    the user's name (User-ID) of the POP3 mail account
    ⍝ PASS password     the user's password for the POP3 mail account
    ⍝ APOP name+digest  used for a secure (encrypted) logon
    ⍝ STAT              answer is number of messages and total size
    ⍝ UIDL msg#         answer is a unique message id
    ⍝ LIST [msg#]       answer is a list of message numbers and sizes
    ⍝                   if message number given: statistics of this msg
    ⍝ RETR msg#         answer is complete message
    ⍝ DELE msg#         message is marked for deletion
    ⍝ RSET              resets all deletion markers
    ⍝ TOP  msg# n       answer is the n first lines of message msg
    ⍝ NOOP              answer is '+OK'
    ⍝ QUIT              ends the session, messages marked for deletion
    ⍝                   are deleted on the server
    ⍝ NOTE: most POP3 servers time out after a certain time with no
    ⍝       activity and treat this as if a QUIT command had been sent.
    ⍝       An intermittant NOOP is advisable to keep the session alive.
    ⍝ see https://tools.ietf.org/html/rfc1939
     go:
      :If ⊃c←Connected                     ⍝ if we're connected
          :If ~empty cmd
              :If 0≠⊃rc←LDRC.Send Clt(cmd,CRLF)
                  →Exit⊣r←'-ERR Conga error: ',,⍕2↑rc
              :EndIf
          :EndIf
          cnt←0
     Try:
          :Select ⊃rc←LDRC.Wait Clt
          :Case 0
              r←(¯2××≢cmd)↓4⊃rc             ⍝ grab the data, drop off trailing CRLF if cmd was non-empty
          :Case 100                         ⍝ timeout, try up to 3 times
              cnt+←1
              →Try if 3>cnt
              r←'-ERR Conga timeout'
          :Else
              r←'-ERR Conga error: ',,⍕2↑rc
          :EndSelect
      :Else                              ⍝ if the socket does not exist
          r←'-ERR POP3 ',2⊃c
      :EndIf
     Exit:
      r←(-'-'=⊃r)r                       ⍝ check for error and return
    ∇

    ∇ r←ReadBuffered;rc;msg;i;h;mask
      :Access public
      ⍝ read buffered response
      ⍝ r is [1] return code and [2] either the data read or error msg if [1]≠0
      r←''
      (rc msg)←Do''
      :While rc=0
          r,←msg
          :If (CRLF,'.',CRLF)≡¯5↑r
              r←¯5↓r
              :Leave
          :Else
              (rc msg)←Do''
          :EndIf
      :EndWhile
      :If rc=0
          r←rc r
      :Else
          r←rc msg
      :EndIf
    ∇

    ∇ r←headers parseBody body;ct;boundary;bodyparts;i;bodypart;bodyheaders
      r←⎕NS''
      r.headers←parseHeaders headers
      :If 'multipart/'≡lc 10↑ct←r.headers getHeader'content-type'
          boundary←'boundary="'splitAfter ct
          boundary←¯1↓2⊃boundary ⍝ drop off traling "
          bodyparts←('--',boundary){⍵⊆⍨(⊢⍱≠\)⍺{⍵∨(1-≢⍺)⌽⍵}⍺⍷⍵}body
          r.preamble←2↓1⊃bodyparts
          r.prologue←2↓⊃¯1↑bodyparts
          r.parts←⍬
          :For i :In 1↓¯1↓⍳≢bodyparts
              (bodyheaders bodypart)←(4⍴CRLF)splitFirst i⊃bodyparts
              r.parts,←bodyheaders parseBody bodypart
          :EndFor
      :Else
          r.body←body
      :EndIf
    ∇

    :section Public_API

    ∇ (rc msg)←List;n;details;r;d
      :Access public
    ⍝ r [1] return code (0=success)
    ⍝   [2] if successful - n×2 [;1] message number [;2] size in bytes; otherwise the error message [;3] UIDL (if available)
      :If 0=⊃(rc msg)←Do'list'
          n←toNum 2⊃split msg ⍝ number of messages
          :If 0=⊃(rc msg)←ReadBuffered
              msg←n↑↑toNum¨splitOnCRLF msg
              :If 0=⊃Do'uidl'
              :AndIf 0=⊃(r d)←ReadBuffered
                  msg,←2∘⊃∘split¨n↑splitOnCRLF d
              :EndIf
          :EndIf
      :EndIf
    ∇

    ∇ (rc msg)←Stat
      :Access public
    ⍝ r [1] return code (0=success)
    ⍝   [2] if successful - 2-element vector of [1] #msgs [2] #octets; otherwise the error message
      :If 0=⊃(rc msg)←Do'stat'
          msg←⊃∘toNum¨1↓split msg ⍝ number of messages/bytes
      :EndIf
    ∇

    ∇ (rc msg)←RawMessage n;size;i;h;mask
      :Access public
    ⍝ n is the message number
    ⍝ r [1] return code
    ⍝   [2] raw message (headers, body, attachments) (or error message if [1]≠0)
      :If 0=⊃(rc msg)←Do'list ',⍕n
          size←toNum 3⊃split msg
          :If size>MessageSizeLimit
              rc←¯1 ⋄ msg←'-ERR message size (',(⍕size),') exceeds MessageSizeLimit (',(⍕MessageSizeLimit),')'
              →0
          :EndIf
          :If 0=⊃(rc msg)←Do'retr ',⍕n
          :AndIf 0=⊃(rc msg)←ReadBuffered
              :If ~0∊⍴i←⍸(CRLF,'..')⍷msg
                  mask←(≢msg)⍴1
                  mask[i+2]←0
                  msg/⍨←mask
              :EndIf
          :EndIf
      :EndIf
    ∇

    ∇ (rc msg)←Message n;headers;body;ct;boundary;bodyparts;i;part;bodypart
      :Access public
      :If 0=⊃(rc msg)←RawMessage n
      ⍝ msg is a namespace with
      ⍝ .headers - 2-columnm matrix of name/value pairs
      ⍝ .body    -
      ⍝ .attachments
          (headers body)←(4⍴CRLF)splitFirst msg
          msg←headers parseBody body
      :EndIf
    ∇

    ∇ (rc msg)←Delete n
      :Access public
      (rc msg)←Do'dele ',⍕n
    ∇

    ∇ (rc msg)←Headers n;wrapped;i
      :Access public
      :If 0=⊃(rc msg)←Do'top ',(⍕n),' 0'
      :AndIf 0=⊃(rc msg)←ReadBuffered
          msg←parseHeaders msg
      :EndIf
    ∇

    ∇ (rc msg)←Ping
      :Access public
      (rc msg)←Do'noop'
    ∇

    ∇ (rc msg)←Reset
      :Access public
      (rc msg)←Do'rset'
    ∇

    ∇ (rc msg)←Done
      :Access public
    ⍝ issue the POP3 quit command which will delete any messages flagged for deletion
    ⍝ and then close the connection
      (rc msg)←Do'quit'
    ∇

    ∇ (rc msg)←Logoff;r
      :Access public
      :If 1=⊃(rc msg)←Connected
          :If 0=⊃r←LDRC.Close Clt
              (rc msg)←0 '+OK logged off'
          :Else
              (rc msg)←¯1('-ERR ',3⊃r,'' '' '')
          :EndIf
      :Else
          rc←¯1
      :EndIf
      _clt←''
    ∇

    :EndSection

    :Section Utilities
    deb←{1↓¯1↓{⍵/⍨~'  '⍷⍵}' ',⍵,' '}
    dlb←{⍵↓⍨+/∧\' '=⍵}
    if←⍴⍨
    unless←↓⍨
    empty←0∘∊⍴
    split←{⍺←' ' ⋄ ⍺(≠⊆⊢)⍵}
    splitFirst←{⍺←' '⋄ ⍵⊆⍨~<\⍺⍷⍵}
    splitOnCRLF←{2↓¨CRLF(⍷⊂⊢)(2×CRLF≡2↑⍵)↓CRLF,⍵}
    lc←0∘(819⌶)
    toNum←{⊃(//)⎕VFI ⍵}
    splitAfter←{∧/m←~<\⍺⍷⍵:'' ⋄ ⍵⊆⍨(≢⍵)↑((¯1+≢⍺)⍴1),m}
    getHeader←{(⍺[;2],⊂'')⊃⍨(lc¨⍺[;1])⍳⊆lc ⍵}

    ∇ r←parseHeaders r;wrapped;i
      r←splitOnCRLF r
      :If ~0∊⍴i←⍸wrapped←(⊃¨r)∊⎕UCS 32 9 ⍝ mark "wrapped" headers (begin with space or horizontal tab)
          r[i]←{' ',⍵↓⍨+/∧\⍵∊⎕UCS 32 9}¨r[i]
          r←∊¨(~wrapped)⊂r
      :EndIf
      r←↑dlb¨¨':'splitFirst¨r
    ∇

    ∇ r←CRLF
      r←⎕UCS 13 10
    ∇

    ∇ (rc msg)←Connected;r;state
      :Access public
    ⍝ rc is 1 if the POP3 server is connected, 0 otherwise (this is unlike other API functions where 0 indicates success)
    ⍝ msg is a (hopefully) informative message
      msg←'POP3 server has not been connected'
      →0↓⍨rc←Clt≢''
      :Trap 0 ⍝ handle any Conga error, LDRC not defined, etc
          r←LDRC.Describe Clt
      :Else
          →0⊣(rc msg)←0 'Conga could not query client'
      :EndTrap
      :If 0=⊃r ⍝ good Conga return code?
          :Select state←lc 3⊃3↑2⊃r
          :Case 'connected'
              (rc msg)←1 'connected'
          :Case 'error'
              (rc msg)←0 'not connected (possible server timeout)'
          :Case 'socketclosed'
              (rc msg)←0 'socket closed'
          :Else
              (rc msg)←0('unknown client state: ',∊⍕state)
          :EndSelect
      :Else
          (rc msg)←0 'non-zero Conga return code'
      :EndIf
    ∇

    :endsection

    :section Conga
    ∇ (rc msg)←Init rootname;ref;root;nc;class;dyalog;n;ns;congaCopied
      (rc msg)←¯1 ''
      ⍝↓↓↓ Check is LDRC exists (VALUE ERROR (6) if not), and is LDRC initialized? (NONCE ERROR (16) if not)
      :Hold 'SMTPInit'
          :If {6 16 999::1 ⋄ ''≡LDRC:1 ⋄ 0⊣LDRC.Describe'.'}''
              LDRC←''
              :If 9=#.⎕NC'Conga' ⋄ {#.Conga.X509Cert.LDRC←''}⍬ ⋄ :EndIf ⍝ if #.Conga exists, reset X509Cert.LDRC reference
              :If ~0∊⍴CongaRef  ⍝ did the user supply a reference to Conga?
                  LDRC←rootname ResolveCongaRef CongaRef
                  :If ''≡LDRC
                      msg←'CongaRef (',(⍕CongaRef),') does not point to a valid instance of Conga'
                      →Exit
                  :EndIf
              :Else
                  :For root :In ##.## #
                      ref nc←root{1↑¨⍵{(×⍵)∘/¨⍺ ⍵}⍺.⎕NC ⍵}ns←(-~0∊⍴rootname)↓'Conga' 'DRC' ⍝ if rootname is supplied, can only use Conga (no DRC)
                      :If 9=⊃⌊nc ⋄ :Leave ⋄ :EndIf
                  :EndFor
                  :If 9=⊃⌊nc
                      LDRC←rootname ResolveCongaRef root⍎∊ref
                      :If ''≡LDRC
                          msg←(⍕root),'.',(∊ref),' does not point to a valid instance of Conga'
                          →Exit
                      :EndIf
                      →∆COPY↓⍨{999::0 ⋄ 1⊣LDRC.Describe'.'}'' ⍝ it's possible that Conga was saved in a semi-initialized state
                  :Else
     ∆COPY:
                      class←⊃⊃⎕CLASS ⎕THIS
                      dyalog←{⍵,'/'↓⍨'/\'∊⍨¯1↑⍵}2 ⎕NQ'.' 'GetEnvironment' 'DYALOG'
                      congaCopied←0
                      :For n :In ns
                          :Trap 0
                              n class.⎕CY dyalog,'ws/conga'
                              LDRC←rootname ResolveCongaRef class⍎n
                              :If ''≡LDRC
                                  msg←n,' was copied from [DYALOG]/ws/conga, but is not valid'
                                  →Exit
                              :EndIf
                              congaCopied←1
                              :Leave
                          :EndTrap
                      :EndFor
                      :If ~congaCopied
                          msg←'Neither Conga nor DRC were successfully copied from [DYALOG]/ws/conga'
                          →Exit
                      :EndIf
                  :EndIf
              :EndIf
          :EndIf
          rc←¯1×LDRC≢''
     Exit:
      :EndHold
    ∇

    ∇ LDRC←rootname ResolveCongaRef CongaRef;z;failed
    ⍝ CongaRef could be a charvec, reference to the Conga or DRC namespaces, or reference to an iConga instance
      LDRC←'' ⋄ failed←0
      :Select ⎕NC⊂'CongaRef' ⍝ what is it?
      :Case 9.1 ⍝ namespace?  e.g. CongaRef←DRC or Conga
     Try:
          :Trap 0
              :If ∨/'.Conga'⍷⍕CongaRef ⍝ is it Conga?
                  LDRC←CongaRef.Init rootname
              :ElseIf 0≡⊃CongaRef.Init'' ⍝ DRC?
                  LDRC←CongaRef
              :Else
                  →0⊣LDRC←''
              :End
          :Else ⍝ if HttpCommand is reloaded and re-executed in rapid succession, Conga initialization may fail, so we try twice
              :If failed
                  →0⊣LDRC←''
              :Else
                  →Try⊣failed←1
              :EndIf
          :EndTrap
      :Case 9.2 ⍝ instance?  e.g. CongaRef←Conga.Init ''
          LDRC←CongaRef ⍝ an instance is already initialized
      :Case 2.1 ⍝ variable?  e.g. CongaRef←'#.Conga'
          :Trap 0
              LDRC←ResolveCongaRef(⍎∊⍕CongaRef)
          :EndTrap
      :EndSelect
    ∇
    :endsection

    :Class MD5 ⍝ create a message digest with the MD5-algorithm (RFC1321)

    ⍝ static class: no instances
    ⍝ see also http://en.wikipedia.org/wiki/Md5

    ⍝ Written 07.07.1999 Conrad Hoesle-Kienzlen <chk@hoesle-kienzlen.de>
    ⍝ Revised 17.03.2002 Brian W. Oliver <bwo@aplborealis.com>
    ⍝ Revised 09.04.2008 Stephen Taylor <sjt@dyalog.com>

⍝----------------------------------- public methods
        ∇ r←Hash msg;chunk;bits;rawbits;ABCD;chunks;start
     ⍝ msg: message of arbitrary length
     ⍝ r:   digest, always 16 hex digits (32 characters)
          :Access Public Shared
         
          ⎕SIGNAL 11/⍨0∊msg∊ASCII                                   ⍝ reject non-ASCII characters
         
          rawbits←,⍉(8/2)⊤¯1+ASCII⍳msg                              ⍝ convert message to binary
          bits←512{⍵↑⍨⍺×⊃0 ⍺⊤⊃⍴⍵}rawbits,512↑1                      ⍝ pad to multiple of 512 bits
          (¯64↑bits)←,⊖8 8⍴,(64⍴2)⊤⍴rawbits                         ⍝ write length at end
         
          ABCD←INITIALSTATES
                                                                ⍝ convert to decimal word length,
          chunks←16 cols 2⊥⍉(32 cols bits)[;,24 16 8 0∘.+⍳8]        ⍝ reverse byte-order, encode to decimal
         
          :For chunk :In ↓chunks
         
              start←ABCD                                            ⍝ initial state for this chunk
         
              ABCD←ABCD(chunk round F)Fshifts                       ⍝ round F
              ABCD←ABCD(chunk round G)Gshifts                       ⍝ round G
              ABCD←ABCD(chunk round H)Hshifts                       ⍝ round H
              ABCD←ABCD(chunk round I)Ishifts                       ⍝ round I
         
              ABCD{MAX|⍺+⍵}←start                                   ⍝ add to initial cycle state
         
          :EndFor
         
          r←⊃,/hex¨ABCD
        ∇

        ∇ ok←SelfTest
          :Access Public Shared
          :If ok←'0cc175b9c0f1b6a831c399e269772661'≡Hash'a'
          :AndIf ok←'d41d8cd98f00b204e9800998ecf8427e'≡Hash''
          :AndIf ok←'7215ee9c7d9dc229d2921a40e899ec5f'≡Hash' '
          :AndIf ok'f96b697d7cb7938d525a2f31aaf161d0'≡Hash'message digest'
              ok←'9e107d9d372bb6826bd81d3542a419d6'≡Hash'The quick brown fox jumps over the lazy dog'
          :EndIf
        ∇

⍝----------------------------------- vocabulary
        ⎕IO ⎕ML←1 0
        MAX←4294967296                                              ⍝ maximum integer
        ASCII←⎕AV[⍋1+⎕NXLATE 0]                                     ⍝ ASCII character string
        cols←{⍵⍴⍨((⍴⍵)÷⍺),⍺}                                        ⍝ reshape in ⍺ cols
        bin←(32/2)∘⊤                                                ⍝ convert to 32-bit binary
        hex←{'0123456789abcdef'[1+,⌽4 2⍴⌽(8/16)⊤⍵]}                 ⍝ convert to hex
        CONVERSIONTABLE←⌊MAX×|1○⍳64

        INITIALSTATES←1732584193 4023233417 2562383102 271733878    ⍝ initial variable states
⍝  '67452301'h 'efcdab89'h '98badcfe'h '10325476'h (low byte order)

        F←{X Y Z←⍵ ⋄ (X∧Y)∨(~X)∧Z}                                  ⍝ encoding function
        G←{X Y Z←⍵ ⋄ (X∧Z)∨Y∧~Z}                                    ⍝ encoding function
        H←{X Y Z←⍵ ⋄ X≠Y≠Z}                                         ⍝ encoding function
        I←{X Y Z←⍵ ⋄ Y≠X∨~Z}                                        ⍝ encoding function
   ⍝ cf http://en.wikipedia.org/wiki/Md5#Algorithm

          apply←{                                                   ⍝ apply encoding function ⍺⍺
              A B C D k s i←⍵                                       ⍝ with arguments ⍵
              B+2⊥s⌽bin ⍺[k]+CONVERSIONTABLE[i]+A+2⊥⍺⍺ bin¨B C D    ⍝ to message chunk ⍺
          }

        ∇ ABCD←ABCD(chunk round fn)shifts;tgt;rot;shft              ⍝ perform a round on chunk
          :For tgt rot shft :InEach (16⍴1 4 3 2)(1-⍳16)(shifts)     ⍝ using fn and shifts,
              ABCD[tgt]←chunk(fn apply)(rot⌽ABCD),shft              ⍝ modifying ABCD
          :EndFor
        ∇

        Fshifts←(1 7 1)(2 12 2)(3 17 3)(4 22 4)                     ⍝ shifts for round F
        Fshifts,←(5 7 5)(6 12 6)(7 17 7)(8 22 8)
        Fshifts,←(9 7 9)(10 12 10)(11 17 11)(12 22 12)
        Fshifts,←(13 7 13)(14 12 14)(15 17 15)(16 22 16)

        Gshifts←(2 5 17)(7 9 18)(12 14 19)(1 20 20)                 ⍝ shifts for round G
        Gshifts,←(6 5 21)(11 9 22)(16 14 23)(5 20 24)
        Gshifts,←(10 5 25)(15 9 26)(4 14 27)(9 20 28)
        Gshifts,←(14 5 29)(3 9 30)(8 14 31)(13 20 32)

        Hshifts←(6 4 33)(9 11 34)(12 16 35)(15 23 36)               ⍝ shifts for round H
        Hshifts,←(2 4 37)(5 11 38)(8 16 39)(11 23 40)
        Hshifts,←(14 4 41)(1 11 42)(4 16 43)(7 23 44)
        Hshifts,←(10 4 45)(13 11 46)(16 16 47)(3 23 48)

        Ishifts←(1 6 49)(8 10 50)(15 15 51)(6 21 52)                ⍝ shifts for round I
        Ishifts,←(13 6 53)(4 10 54)(11 15 55)(2 21 56)
        Ishifts,←(9 6 57)(16 10 58)(7 15 59)(14 21 60)
        Ishifts,←(5 6 61)(12 10 62)(3 15 63)(10 21 64)

    :EndClass

:endclass
